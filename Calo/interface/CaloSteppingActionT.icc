#ifndef SimGVCore_Calo_CaloSteppingActionT_icc
#define SimGVCore_Calo_CaloSteppingActionT_icc

// to make hits in EB/EE/HC
#include "SimGVCore/Calo/interface/CaloSteppingActionT.h"
#include "SimG4Core/Notification/interface/G4TrackToParticleID.h"

#include "DataFormats/HcalDetId/interface/HcalDetId.h"
#include "SimDataFormats/CaloHit/interface/PCaloHit.h"

#include "FWCore/Framework/interface/EventSetup.h"
#include "FWCore/Framework/interface/ESHandle.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"
#include "FWCore/Utilities/interface/isFinite.h"
#include "FWCore/Utilities/interface/Exception.h"

#include <cmath>
#include <iostream>
#include <iomanip>

//#define EDM_ML_DEBUG

template <class Traits>
CaloSteppingActionT<Traits>::CaloSteppingActionT(const edm::ParameterSet &p) : 
  params_(p),
  caloMap_(nullptr),
  count_(0),
  eventID_(0) {

  edm::ParameterSet iC = p.getParameter<edm::ParameterSet>("CaloSteppingAction");
  nameEBSD_       = iC.getParameter<std::vector<std::string> >("EBSDNames");
  nameEESD_       = iC.getParameter<std::vector<std::string> >("EESDNames");
  nameHCSD_       = iC.getParameter<std::vector<std::string> >("HCSDNames");
  nameHitC_       = iC.getParameter<std::vector<std::string> >("HitCollNames");
  allSteps_       = iC.getParameter<int>("AllSteps");
  slopeLY_        = iC.getParameter<double>("SlopeLightYield");
  birkC1EC_       = iC.getParameter<double>("BirkC1EC");
  birkSlopeEC_    = iC.getParameter<double>("BirkSlopeEC");
  birkCutEC_      = iC.getParameter<double>("BirkCutEC");
  birkC1HC_       = iC.getParameter<double>("BirkC1HC");
  birkC2HC_       = iC.getParameter<double>("BirkC2HC");
  birkC3HC_       = iC.getParameter<double>("BirkC3HC");
  timeSliceUnit_  = iC.getUntrackedParameter<double>("TimeSliceUnit",1.0);

#ifdef EDM_ML_DEBUG
  edm::LogVerbatim("Step") << "CaloSteppingAction:: " << nameEBSD_.size() 
                           << " names for EB SD's";
  for (unsigned int k=0; k<nameEBSD_.size(); ++k)
    edm::LogVerbatim("Step") << "[" << k << "] " << nameEBSD_[k];
  edm::LogVerbatim("Step") << "CaloSteppingAction:: " << nameEESD_.size() 
                           << " names for EE SD's";
  for (unsigned int k=0; k<nameEESD_.size(); ++k)
    edm::LogVerbatim("Step") << "[" << k << "] " << nameEESD_[k];
  edm::LogVerbatim("Step") << "CaloSteppingAction:: " << nameHCSD_.size() 
                           << " names for HC SD's";
  for (unsigned int k=0; k<nameHCSD_.size(); ++k)
    edm::LogVerbatim("Step") << "[" << k << "] " << nameHCSD_[k];
  edm::LogVerbatim("Step") << "CaloSteppingAction::Constants for ECAL: slope "
                           << slopeLY_ << " Birk constants " << birkC1EC_ 
                           << ":" << birkSlopeEC_ << ":" << birkCutEC_;
  edm::LogVerbatim("Step") << "CaloSteppingAction::Constants for HCAL: Birk "
                           << "constants " << birkC1HC_ << ":" << birkC2HC_
                           << ":" << birkC3HC_;
  edm::LogVerbatim("Step") << "CaloSteppingAction::Constant for time slice " << timeSliceUnit_;
  edm::LogVerbatim("Step") << "CaloSteppingAction:: " << nameHitC_.size() 
                           << " hit collections";
  for (unsigned int k=0; k<nameHitC_.size(); ++k)
    edm::LogVerbatim("Step") << "[" << k << "] " << nameHitC_[k];
#endif
  ebNumberingScheme_ = std::make_unique<EcalBarrelNumberingScheme>();
  eeNumberingScheme_ = std::make_unique<EcalEndcapNumberingScheme>();
  hcNumberingPS_     = std::make_unique<HcalNumberingFromPS>(iC);
  hcNumberingScheme_ = std::make_unique<HcalNumberingScheme>();
  for (int k=0; k<CaloSteppingActionT::nSD_; ++k) {
    slave_[k] = std::make_unique<CaloSlaveSD>(nameHitC_[k]);
    produces<edm::PCaloHitContainer>(nameHitC_[k]);
  }
  if (allSteps_ > 0) 
    produces<edm::PassiveHitContainer>("AllPassiveHits");
#ifdef EDM_ML_DEBUG
  edm::LogVerbatim("Step") << "CaloSteppingAction:: All Steps Flag " 
  			   << allSteps_ << " for passive hits";
#endif
} 

template <class Traits>
CaloSteppingActionT<Traits>::~CaloSteppingActionT() {
  edm::LogVerbatim("Step") << "CaloSteppingAction: -------->  Total number of "
                           << "selected entries : " << count_;
}

template <class Traits>
void CaloSteppingActionT<Traits>::produce(edm::Event& e, const edm::EventSetup&) {

  for (int k=0; k<CaloSteppingActionT::nSD_; ++k) {
    saveHits(k);
    auto product = std::make_unique<edm::PCaloHitContainer>();
    fillHits(*product,k);
    e.put(std::move(product),nameHitC_[k]);
  }
  if (allSteps_ > 0) {
    auto hgcPH = std::make_unique<edm::PassiveHitContainer>(store_);
#ifdef EDM_ML_DEBUG
  edm::LogVerbatim("Step") << "CaloSteppingAction::produce PassiveHits with "
                           << store_.size() << " hits";
#endif
    e.put(std::move(hgcPH), "AllPassiveHits");
  }
}

//access stored params (to make another instance of this class)
template <class Traits>
const edm::ParameterSet& CaloSteppingActionT<Traits>::GetParams() const {
  return params_;
}

template <class Traits>
bool CaloSteppingActionT<Traits>::Merge(const CaloSteppingActionT<Traits>& other) {
  //fill hits from other instance
  for (int k=0; k<CaloSteppingActionT::nSD_; ++k) {
    for(const auto& hit : other.hitMap_[k]){
      auto evID = hit.first;
      auto it = hitMap_[k].find(evID);
      if(it != hitMap_[k].end()) it->second.addEnergyDeposit(hit.second.getEM(),hit.second.getHadr());
      else hitMap_[k][evID] = hit.second;
    }
  }
  //merge the store information
  if (allSteps_ > 0) {
    store_.reserve(store_.size()+other.store_.size());
    for (const auto& hit : other.store_) {
      store_.push_back(hit);
    }
  }
  return true;
}

template <class Traits>
void CaloSteppingActionT<Traits>::fillHits(edm::PCaloHitContainer& cc, int type) {
#ifdef EDM_ML_DEBUG
  edm::LogVerbatim("Step") << "CaloSteppingAction::fillHits for type "
                           << type << " with "
                           << slave_[type].get()->hits().size() << " hits";
#endif
  cc = slave_[type].get()->hits();
  slave_[type].get()->Clean();
}

template <class Traits>
void CaloSteppingActionT<Traits>::update(const BeginOfJob * job) {
#ifdef EDM_ML_DEBUG
  edm::LogVerbatim("Step") << "CaloSteppingAction:: Enter BeginOfJob";
#endif
}

//==================================================================== per RUN
template <class Traits>
void CaloSteppingActionT<Traits>::update(const BeginRunWrapper& run) {

#ifdef EDM_ML_DEBUG
  int irun = run.getRunID();
  edm::LogVerbatim("Step") << "CaloSteppingAction:: Begin of Run = " << irun;
#endif

  //eventually this should be replaced by an EventSetup object
  caloMap_ = &(fillCaloMap());

    if (allSteps_ > 0) {
      const auto& nameMap = VolumeWrapper::getVolumes();
      for (const auto& itr : nameMap) 
        mapLV_[itr.second] = itr.first;
    }
#ifdef EDM_ML_DEBUG
  edm::LogVerbatim("Step") << caloMap_->volEBSD().size() << " logical volumes for EB SD";
  for (unsigned int k=0; k<caloMap_->volEBSD().size(); ++k)
    edm::LogVerbatim("Step") << "[" << k << "] " << caloMap_->volEBSD()[k];
  edm::LogVerbatim("Step") << caloMap_->volEESD().size() << " logical volumes for EE SD";
  for (unsigned int k=0; k<caloMap_->volEESD().size(); ++k)
    edm::LogVerbatim("Step") << "[" << k << "] " << caloMap_->volEESD()[k];
  edm::LogVerbatim("Step") << caloMap_->volHCSD().size() << " logical volumes for HC SD";
  for (unsigned int k=0; k<caloMap_->volHCSD().size(); ++k)
    edm::LogVerbatim("Step") << "[" << k << "] " << caloMap_->volHCSD()[k];
#endif
}

template <class Traits>
const CaloMapT<Traits>& CaloSteppingActionT<Traits>::fillCaloMap() const {
  static const CaloMapT<Traits> caloMap(nameEBSD_,nameEESD_,nameHCSD_);

  return caloMap;
}

//=================================================================== per EVENT
template <class Traits>
void CaloSteppingActionT<Traits>::update(const BeginEventWrapper& evt) {
  eventID_ = evt.getEventID();
 
#ifdef EDM_ML_DEBUG
  edm::LogVerbatim("Step") <<"CaloSteppingAction: Begin of event = " 
                           << eventID_;
#endif
  for (int k=0; k<CaloSteppingActionT<Traits>::nSD_; ++k) {
    hitMap_[k].clear();
    slave_[k].get()->Initialize();
  }
  if (allSteps_ > 0)
    store_.clear();
}

//=================================================================== each STEP
template <class Traits>
void CaloSteppingActionT<Traits>::update(const StepWrapper& aStep) {

  NaNTrap(aStep);
  auto lv = aStep.getVolume();
  bool hc = (std::find(caloMap_->volHCSD().begin(),caloMap_->volHCSD().end(),lv)!=caloMap_->volHCSD().end());
  bool eb = (std::find(caloMap_->volEBSD().begin(),caloMap_->volEBSD().end(),lv)!=caloMap_->volEBSD().end());
  bool ee = (std::find(caloMap_->volEESD().begin(),caloMap_->volEESD().end(),lv)!=caloMap_->volEESD().end());
  if  (hc || eb || ee) {
    double dEStep = aStep.getEnergyDeposit();
    double time   = aStep.getTime();
    int    primID = aStep.getTrackID();
    bool   em     = aStep.getEM();
#ifdef EDM_ML_DEBUG
      edm::LogVerbatim("Step") 
        << "CaloSteppingAction: dE " << dEStep << " T " << time << " Track "
        << primID << " EM " << em;
#endif
    if (hc) {
      std::pair<int,int> copies = aStep.getCopyNos();
      int depth = (copies.first)%10 + 1;
      int lay   = (copies.first/10)%100 + 1;
      int det   = (copies.second)/1000;
#ifdef EDM_ML_DEBUG
      edm::LogVerbatim("Step") 
        << "CaloSteppingAction: HCAL [0] " << aStep.getNameNumber(0).first
        << ":" << aStep.getNameNumber(0).second << ":" << copies.first
        << " [1] " << aStep.getNameNumber(1).first << ":" 
        << aStep.getNameNumber(1).second << ":" << copies.second
        << " Det:Layer:Depth " << det << ":" << lay << ":" << depth;
#endif
      auto unitID = getDetIDHC(det, lay, depth, aStep.getPosition(false));
      if(unitID > 0 && dEStep > 0.0) {
        dEStep *= getBirkHC(dEStep, aStep.getStepLength(), aStep.getCharge(), aStep.getDensity());
        fillHit(unitID, dEStep, time, primID, 0, em, 2);
      }
    } else {
      EcalBaseNumber theBaseNumber;
      int  size = aStep.getSize();
#ifdef EDM_ML_DEBUG
      edm::LogVerbatim("Step") << "CaloSteppingAction: ECAL size " << size;
#endif
      if (theBaseNumber.getCapacity() < size ) theBaseNumber.setSize(size);
      //Get name and copy numbers
      if (size > 1) {
        aStep.setNameNumber(theBaseNumber);
#ifdef EDM_ML_DEBUG
        for (int ii = 0; ii < size ; ii++) 
          edm::LogVerbatim("Step") 
            << "CaloSteppingAction: ECAL [" << ii << "] "
            << theBaseNumber.getLevelName(ii) << ":" 
	    << theBaseNumber.getCopyNumber(ii);
#endif
      }
      auto unitID = (eb ? (ebNumberingScheme_->getUnitID(theBaseNumber)) :
                     (eeNumberingScheme_->getUnitID(theBaseNumber)));
      if (unitID > 0 && dEStep > 0.0) {
        double dz = aStep.getDz();
        auto ite   = caloMap_->xtalMap().find(lv);
        double crystalLength = ((ite == caloMap_->xtalMap().end()) ? 230.0 : 
                                std::abs(ite->second));
        double crystalDepth = ((ite == caloMap_->xtalMap().end()) ? 0.0 :
                               (std::abs(0.5*(ite->second)+dz)));
        double radl   = aStep.getRadlen();
        bool   flag   = ((ite == caloMap_->xtalMap().end()) ? true : (((ite->second) >= 0)
                                                           ? true : false));
        auto   depth  = getDepth(flag, crystalDepth, radl);
        dEStep        *= (getBirkL3(dEStep,aStep.getStepLength(), aStep.getCharge(), aStep.getDensity()) * 
                          curve_LY(crystalLength,crystalDepth));
        fillHit(unitID, dEStep, time, primID, depth, em, (eb ? 0 : 1));
      }
    }
  }

  if (allSteps_ > 0) {
    auto it = mapLV_.find(lv);
    double energy = aStep.getEnergyDeposit() + aStep.addEnergy();
    double time   = aStep.getTime();
    int    trackId= aStep.getTrackID();
    int    pdg    = aStep.getPDGId();
    uint32_t copy = aStep.getCopy();
    double stepl  = aStep.getStepLength();
    if (it != mapLV_.end()) {
      store_.emplace_back(it->second, copy, energy, energy, time, trackId, pdg, stepl);
    }
  }
}

//================================================================ End of EVENT
template <class Traits>
void CaloSteppingActionT<Traits>::update(const EndEventWrapper& evt) {
  ++count_;
#ifdef EDM_ML_DEBUG
  // Fill event input 
  edm::LogVerbatim("Step") << "CaloSteppingAction: EndOfEvent " 
                           << evt.getEventID();
#endif
}

template <class Traits>
void CaloSteppingActionT<Traits>::NaNTrap(const StepWrapper& aStep) const {

  auto currentPos = aStep.getPosition(true);
  double xyz = currentPos.x() + currentPos.y() + currentPos.z();
  auto currentMom = aStep.getMomentum();
  xyz += currentMom.x() + currentMom.y() + currentMom.z();

  if (edm::isNotFinite(xyz)) {
    const auto& nameOfVol = aStep.getVolumeName();
    throw cms::Exception("Unknown", "CaloSteppingAction") 
      << " Corrupted Event - NaN detected in volume " << nameOfVol << "\n";
  }
}

template <class Traits>
uint32_t CaloSteppingActionT<Traits>::getDetIDHC(int det, int lay, int depth,
                                        const math::XYZVectorD& pos) const {

  HcalNumberingFromDDD::HcalID tmp = hcNumberingPS_.get()->unitID(det, lay, 
                                                                  depth, pos);
  return (hcNumberingScheme_.get()->getUnitID(tmp));
}

template <class Traits>
void CaloSteppingActionT<Traits>::fillHit(uint32_t id, double dE, double time,
                                 int primID, uint16_t depth, bool em,
                                 int flag) {
  CaloHitID  currentID(id, time, primID, depth, timeSliceUnit_);
  double edepEM  = (em ? dE : 0);
  double edepHAD = (em ? 0 : dE);
  std::pair<int,CaloHitID> evID = std::make_pair(eventID_,currentID);
  auto it = hitMap_[flag].find(evID);
  if (it != hitMap_[flag].end()) {
    (it->second).addEnergyDeposit(edepEM,edepHAD);
  } else {
    CaloGVHit aHit;
    aHit.setEventID(eventID_);
    aHit.setID(currentID);
    aHit.addEnergyDeposit(edepEM,edepHAD);
    hitMap_[flag][evID] = aHit;
  }
}

template <class Traits>
uint16_t CaloSteppingActionT<Traits>::getDepth(bool flag, double crystalDepth,
                                      double radl) const {
  uint16_t depth1 = (flag ? 0 : PCaloHit::kEcalDepthRefz);
  uint16_t depth2 = (uint16_t)floor(crystalDepth/radl);
  uint16_t depth  = (((depth2&PCaloHit::kEcalDepthMask) << PCaloHit::kEcalDepthOffset) | depth1);
#ifdef EDM_ML_DEBUG
  edm::LogVerbatim("Step") << "CaloSteppingAction::getDepth radl " << radl
                           << ":" << crystalDepth << " depth " << depth;
#endif
  return depth;
}

template <class Traits>
double CaloSteppingActionT<Traits>::curve_LY(double crystalLength, 
                                    double crystalDepth) const {
  double weight = 1.;
  double dapd = crystalLength - crystalDepth;
  if (dapd >= -0.1 || dapd <= crystalLength+0.1) {
    if (dapd <= 100.)
      weight = 1.0 + slopeLY_ - dapd * 0.01 * slopeLY_;
#ifdef EDM_ML_DEBUG
    edm::LogVerbatim("Step") << "CaloSteppingAction::curve_LY " << crystalDepth
                             << ":" << crystalLength << ":" << dapd << ":" 
                             << weight;
#endif
  } else {
    edm::LogWarning("Step") << "CaloSteppingAction: light coll curve : wrong "
                            << "distance to APD " << dapd << " crlength = " 
                            << crystalLength <<" crystal Depth = " 
                            << crystalDepth << " weight = " << weight;
  }
  return weight;
}

template <class Traits>
double CaloSteppingActionT<Traits>::getBirkL3(double dEStep, double step, 
                                     double charge, double density) const {
  double weight = 1.;
  if (charge != 0. && step > 0.) {
    double dedx    = dEStep/step;
    double rkb     = birkC1EC_/density;
    if (dedx > 0) {
      weight         = 1. - birkSlopeEC_*log(rkb*dedx);
      if (weight < birkCutEC_) weight = birkCutEC_;
      else if (weight > 1.)    weight = 1.;
    }
#ifdef EDM_ML_DEBUG
    edm::LogVerbatim("Step") << "CaloSteppingAction::getBirkL3 Charge "
                             << charge << " dE/dx " << dedx << " Birk Const " 
			     << birkC1EC_ << ":" << density << ":" << rkb << ":"
			     << birkSlopeEC_ << ":" << birkCutEC_  
			     << " Weight = " << weight << " dE " << dEStep 
			     << " step " << step;
#endif
  }
  return weight;
}

template <class Traits>
double CaloSteppingActionT<Traits>::getBirkHC(double dEStep, double step, 
                                     double charge,  double density) const {

  double weight = 1.;
  if (charge != 0. && step > 0.) {
    double dedx    = dEStep/step;
    double rkb     = birkC1HC_/density;
    double c       = birkC2HC_*rkb*rkb;
    if (std::abs(charge) >= 2.) rkb /= birkC3HC_;
    weight = 1./(1.+rkb*dedx+c*dedx*dedx);
#ifdef EDM_ML_DEBUG
    edm::LogVerbatim("Step") << "CaloSteppingAction::getBirkHC Charge " 
                             << charge << " dE/dx " << dedx  << " Birk Const "
			     << birkC1HC_ << ":" << density << ":" << rkb << ":"
			     << birkC2HC_ << ":" << c << ":" << birkC3HC_
                             << " Weight = " << weight << " dE "
                             << dEStep;
#endif
  }
  return weight;
}

template <class Traits>
void CaloSteppingActionT<Traits>::saveHits(int type) {

#ifdef EDM_ML_DEBUG
  edm::LogVerbatim("Step") << "CaloSteppingAction:: saveHits for type " 
                           << type << " with " << hitMap_[type].size()
                           << " hits";
#endif
  slave_[type].get()->ReserveMemory(hitMap_[type].size());
  for (auto const& hit : hitMap_[type]) {
    slave_[type].get()->processHits(hit.second.getUnitID(),
                                    0.001*hit.second.getEM(), 
                                    0.001*hit.second.getHadr(),
                                    hit.second.getTimeSlice(),
                                    hit.second.getTrackID(),
                                    hit.second.getDepth());
  }
}

#endif
